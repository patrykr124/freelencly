generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String?
  role         Role     @default(client)
  createdAt    DateTime @default(now())
  jobs         Job[]    @relation("PostedJobs")
  orders       Order[]  @relation("UserOrders")
  Auth         Auth[]
  CreatedTask  Task[]   @relation("CreatedTask")
  AssignedTask Task[]   @relation("AssignedTask")
}

model Auth {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String
  type      String
  createdAt DateTime @default(now())
}

model Job {
  id           String             @id @default(uuid())
  title        String
  description  String
  img          String
  postedBy     User               @relation("PostedJobs", fields: [postedById], references: [id])
  postedById   String
  category     Category
  createdAt    DateTime           @default(now())
  Order        Order[]
  packages     JobPackage[]       @relation("JobToPackages")
  taskPerHours TaskManagerOffer[] @relation("perHours")
}

model JobPackage {
  id          String      @id @default(uuid())
  job         Job         @relation("JobToPackages", fields: [jobId], references: [id])
  jobId       String
  type        PackageType
  price       Float
  revisions   Int
  description String?
}

model TaskManagerOffer {
  id         String  @id @default(uuid())
  job        Job?    @relation("perHours", fields: [jobId], references: [id])
  jobId      String?
  hourlyRate Float
}

model Order {
  id        String   @id @default(uuid())
  jobId     String
  job       Job      @relation(fields: [jobId], references: [id])
  userId    String
  user      User     @relation("UserOrders", fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Task {
  id           String       @id @default(uuid())
  title        String
  description  String?
  status       TaskStatus   @default(todo)
  priority     TaskPriority @default(normal)
  createdBy    User         @relation("CreatedTask", fields: [createdById], references: [id])
  createdById  String
  assignedTo   User?        @relation("AssignedTask", fields: [assignedToId], references: [id])
  assignedToId String?
  createdAt    DateTime     @default(now())
  updateAt     DateTime     @updatedAt
  dueDate      DateTime?
}

enum TaskStatus {
  todo
  in_progress
  in_review
  done
}

enum TaskPriority {
  low
  normal
  medium
  high
}

enum Role {
  client
  freelencer
}

enum Category {
  web_development
  mobile_development
  ui_ux
  graphic_design
  copywriting
  marketing
  consultance
  web3
}

enum PackageType {
  BASIC
  STANDARD
  PREMIUM
}
